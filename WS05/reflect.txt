Name: Abdulbasid Guled
Student Number: 156024184
Email: aguled5@myseneca.ca
Workshop 5: At-Home


- In this workshop, I learned about constructing Functors, Function Pointers, Lamda Expressions, and Error Handling. 

- Most of my difficulties were in the Collection.h template class operator +=. Although it's similar to the += operator overload from Workshop 4, it was the resizing that took the longest for me. 

- Many of the operations were as simple as redoing code from the in-lab of Workshop 5. The Movie module was just that; a replica of the Book module.

- The main function was also simple from adding the books and movies to their respective collection array, to wrapping the code that can generate an exception inside a try/catch.


1- The main difference between a Lamda expression and a functor is what they're created for and how they operate. A functor is simply a class that has the () operator overloaded. With that, it can function like a regular function but with an object. In SpellChecker.cpp, we overload the () operator to fix the spelling of words but the operator can be overloaded for almost anything.

Meanwhile, a lamda expression is simply an annonymous function. They're able to capture any local variables declare within the scope of the lamda and perform operations on them. In the w5_home.cpp, we create a lamda expression that captures 2 local variables declared just above it and simply use those 2 variables to update the price of each book. The price function returns a reference for this reason. 

2- I would set the value for each book/movie to null by default, ensuring that it's in a safe empty state. This ensures that only books/movies that actually exist would go through. I'd then check if each item passed through was not null so that I could remove the possibility of an item with garbage value being passed.

3- One way would be to make an Interface for both Book and Movie that both could inherit from, implementing the necessary code changes. 

Another way, would be to create a Template class and add in all the necessary code for both modules. Since the functions in both are the same, one template class means I only have to change the name when initializing both modules.

4- A default constructor is not necessary in the context of this workshop, however, it's much better to have because it allows us to remove all assumptions with regards to the files. The default constructor sets each object to a safe empty state. If the main function was changed to account for movies/books that lacked the data necessary for the custom constructor, then the default constructor would be able to handle such cases.

Quiz 5 Reflection:

I made 1 mistake in this quiz for a total of 9/10

My mistake:

-  
